""""
Esta animación relaciona el concepto de cilio en un círculo con una sinusoide.
Hay otra animación que además posee un péndulo ern esta relación
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.patches import ConnectionPatch
import matplotlib.ticker as tck

from matplotlib import rc
from IPython.display import HTML

w_pend = np.pi # frecuencia angular del péndulo
T_pend = (2*np.pi)/w_pend # periodo del movimiento del péndulo
ciclo_sin = 2*T_pend
A = 1

# crear vectores a los que se les irá ingresando las posiciones
x_cirData, y_cirData = [0,0], [0,0]
x_cir, y_cir = [], []
x_sinData, y_sinData = [0,0], [0,0]
x_une, y_une = [0,0], [0,0]
# crear las figuras y respectivos plots
plt.style.use('dark_background') # fondo negro
fig = plt.figure(figsize=(9,3)) # se regula el tamaño de la figura completa, para que la circunferencia no se deforme
ax2 = plt.subplot2grid((1, 3), (0, 0), colspan=1) # para graficar la círculo
ax3 = plt.subplot2grid((1, 3), (0, 1), colspan=2) # para graficar el sinusoide
width_line = 2 # ancho de las líneas

# información ax2
ax2.set_xlim(-1.3*A, 1.3*A)
ax2.set_ylim(-1.3*A, 1.3*A)
ax2.spines['right'].set_visible(False)
ax2.spines['top'].set_visible(False)
#ax2.spines['bottom'].set_visible(False)
#ax2.spines['left'].set_visible(False)
ax2.get_xaxis().set_visible(False)
ax2.get_yaxis().set_visible(False)
ax2.spines['bottom'].set_position('zero')
ax2.spines['bottom'].set_color('#c8dfe5')
ax2.spines['left'].set_position('zero')
ax2.spines['left'].set_color('#c8dfe5')
lineCir, = ax2.plot([], [], lw=width_line,color='#c8dfe5')
line0Cir, = ax2.plot([], [], color='red', marker='o', markeredgecolor='r')
line1Cir, = ax2.plot([], [], lw=width_line, color='b')

# información ax3
ax3.set_xlim(0, 1.1*ciclo_sin)
ax3.set_ylim(-1.3*A, 1.3*A)
ax3.spines['right'].set_visible(False)
ax3.spines['top'].set_visible(False)
#ax3.spines['bottom'].set_visible(False)
#ax3.spines['left'].set_visible(False)
#ax3.get_yaxis().set_visible(False)
#ax3.get_xaxis().set_visible(False)
ax3.spines['bottom'].set_position('zero')
ax3.spines['bottom'].set_color('#c8dfe5')
ax3.tick_params(axis='x', colors='#c8dfe5', size=5)
ax3.spines['left'].set_position('zero')
ax3.spines['left'].set_color('#c8dfe5')
ax3.tick_params(axis='y', colors='#c8dfe5', size=5)
ax3.set_yticks([-1,0,1])

ax3.xaxis.set_major_formatter(tck.FormatStrFormatter('%g $\pi$'))
ax3.xaxis.set_major_locator(tck.MultipleLocator(base=0.5))
ax3.xaxis.get_offset_text().set_fontsize(24)

# información de las  flechas
lineSin, = ax3.plot([], [], lw=width_line,color='#c8dfe5')
line0Sin, = ax3.plot([], [], color='r', marker="o", markeredgecolor='r')
# línea que une círculo con sinusoide
con2 = ConnectionPatch(xyA=[0,0], xyB=[0,0], coordsA="data", coordsB="data",axesA=ax3, axesB=ax2, color="#f7a3a3",linestyle='--')
ax3.add_artist(con2)

def init():
    lineCir.set_data([], [])
    line0Cir.set_data([], [])
    line1Cir.set_data([], [])
    lineSin.set_data([], [])
    line0Sin.set_data([], [])
    return lineCir, line0Cir, line1Cir, lineSin, line0Sin

def animation_frame(i):
    global con2 # variables globales para que puedan ser removidas
    con2.remove() # borra la línea que une círculo con sinusoide

    # calcula posición en el círculo
    x_cirData[1] = A*np.cos(w_pend*i)
    y_cirData[1] = A*np.sin(w_pend*i)
    x_cir.append(x_cirData[1])
    y_cir.append(y_cirData[1])
    # Calcula las posiciones en la sinusoide
    x_sin = i
    y_sin = A*np.sin(w_pend*i)
    x_sinData.append(x_sin)
    y_sinData.append(y_sin)
    
    ## setea la información en las respectivas líneas para la animación
    # información líneas del círculo
    lineCir.set_data(x_cir, y_cir)
    line1Cir.set_data(x_cirData, y_cirData)
    line0Cir.set_data(x_cirData[1], y_cirData[1])
    xy_circulo = (x_cirData[1], y_cirData[1])
    # información líneas de la sinusoide
    lineSin.set_data(x_sinData, y_sinData)
    line0Sin.set_data(x_sin, y_sin)

    # crea las coordenadas para la línea que une círculo con sinusoide
    xy_sinus = (x_sin, y_sin)
    con2 = ConnectionPatch(xyA=xy_sinus, xyB=xy_circulo, coordsA="data", coordsB="data",axesA=ax3, axesB=ax2, color="red",linestyle='--', lw=1.5)
    ax3.add_artist(con2)
    return lineCir, line0Cir, line1Cir, lineSin, line0Sin


# generar la animación
animation = FuncAnimation(fig, animation_frame, init_func=init, frames=np.linspace(0, ciclo_sin, 200),blit=False,interval = 50)
# al modificar la separacion entre cada intervalo en np.arange se graba más lento

plt.show() # muestra la animación

# crea la animación
HTML(animation.to_html5_video())

# para grabar la animación
animation.save('nombre.mp4') 
